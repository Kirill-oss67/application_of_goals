version: '3.9'

services:

  front:
    image: sermalenk/skypro-front:lesson-36
    ports:
      - "80:80"
    depends_on:
      - postgres
      - api
    networks:
      - backend_nw

  postgres:
    image: postgres:13.0-alpine
    restart: always
    env_file:
      - todolist/.env_example
    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d todolist_db" ]
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    networks:
      - backend_nw

  api:
    build:
      context: .
    ports:
      - '8000:8000'
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - todolist/.env_example
    networks:
      - backend_nw

  migrations:
    build:
      context: .
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - todolist/.env_example
    command: python ./todolist/manage.py migrate
    networks:
      - backend_nw

volumes:
  pg_data_todolist:

networks:
  backend_nw:
    driver: bridge



